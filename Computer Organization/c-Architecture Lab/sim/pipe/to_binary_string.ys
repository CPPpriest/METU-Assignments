#/* $begin to_binary_string-ys */
##################################################################
# to_binary_string.ys - Convert an arr block of len integers to 
# binary strings and store in buff
# Return the sum of integers contained in arr.
# Include your name and ID here.
# Describe how and why you modified the baseline code.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = arr, %rsi = buff, %rdx = len
to_binary_string:
##################################################################
# You can modify this portion
    # Loop header
    xorq %rax,%rax    	     # sum = 0;
    irmovq $128, %rcx       # pow = 128

    andq %rdx,%rdx    	     # len <= 0?
    jle Done                # if so, goto Done:
Loop:    
    mrmovq (%rdi), %r9      # read val from arr...
    irmovq $8, %r8
    addq %r8, %rdi          # arr++
    addq %r9, %rax          # sum += val
    rrmovq %rsi, %r10       # temp = buff
    irmovq $128, %rcx       # pow = 128
inner_loop:
    andq %rcx,%rcx    	     # pow <= 0?
    jle updates
    rrmovq %rcx, %r8
    subq %r9, %r8
    jg otw                  # check if val >= pow
    subq %rcx, %r9          # val -= pow;
    irmovq $49, %r8         
    rmmovq %r8, (%r10)      # *temp = '1'
    jmp inner_updates
otw:   
    irmovq $48, %r8
    rmmovq %r8, (%r10)     # *temp = '0'
inner_updates:  
    irmovq $1, %r8
    addq %r8, %r10         # temp++
  
    # all this for pow>>=1
    xorq %r11, %r11          
right_shift:
    rrmovq %r8, %r12
    subq %rcx, %r12
    je shift_end
    
    rrmovq %r8, %r11
    addq %r8, %r8
    jmp right_shift  

shift_end:
    rrmovq %r11, %rcx
    jmp inner_loop
    
updates:
    irmovq $1, %r8
    subq %r8, %rdx    	     # len--
    irmovq $8, %r8
    addq %r8, %rsi    	     # buff++
    andq %rdx,%rdx    	     # len > 0?
    jg Loop                 # if so, goto Loop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end to_binary_string-ys */
